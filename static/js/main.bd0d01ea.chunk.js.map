{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","addresses","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","options1","getPastEvents","listAddress","events","dataStored","event","push","methods","get","call","response","setState","error","runSet","valeur","document","getElementById","value","set","send","from","transac","returnValues","addr","data","this","className","type","id","onClick","map","addresse","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd0d01ea.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","// Version 4\r\n\r\nimport React, { Component } from \"react\";\r\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, addresses: null };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        SimpleStorageContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      let options = {\r\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\r\n        toBlock: 'latest'\r\n      };\r\n\r\n      let options1 = {\r\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\r\n      };\r\n\r\n      let listAddress = await instance.getPastEvents('dataStored', options);\r\n\r\n      instance.events.dataStored(options1).on('data', event => listAddress.push(event));\r\n      const response = await instance.methods.get().call();\r\n\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ storageValue: response, web3, accounts, contract: instance, addresses:listAddress });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  runSet = async () => {\r\n    const { accounts, contract} = this.state;\r\n    let valeur=document.getElementById(\"valeur\").value;\r\n    const transac = await contract.methods.set(valeur).send({ from: accounts[0] });\r\n    const response = await contract.methods.get().call();\r\n\r\n    console.log(\"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr);\r\n    console.log(\"la data est celle ci: \" + transac.events.dataStored.returnValues.data);\r\n    console.log(transac);\r\n\r\n    this.setState({ storageValue: response });\r\n    };\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Good to Go!</h1>\r\n        <p>Your Truffle Box is installed and ready.</p>\r\n        <h2>Smart Contract Example</h2>\r\n        <div>The stored value is: {this.state.storageValue}</div>\r\n        <p>\r\n          Try changing the value by setting it via the input:\r\n        </p>\r\n        <input type=\"text\" id=\"valeur\" />\r\n        <button onClick={this.runSet}>Set the value you wrote inside the blockchain</button>\r\n        <br />\r\n        <p>Here is the addresses that interacted with the contract, and the value they put</p>\r\n        <table>\r\n        {this.state.addresses.map((addresse) => (\r\n          <tr><td>{addresse.returnValues.addr}</td><td>{addresse.returnValues.data}</td></tr>\r\n        ))}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}